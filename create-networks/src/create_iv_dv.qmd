---
title: "Create Independent and Dependent Variables"
format: pdf
---

```{r}
library(sna)
library(knitr)
opts_chunk$set(message = F, echo = F, warning = F)

library(here)
source(here("functions.R"))
```

```{r}
unit_shift_net <- readRDS(here("create-networks", "output", "unit_shift_net_bp.rds"))
stop_net <- readRDS(here("create-networks", "output", "stop_net_bp.rds"))
arrest_net <- readRDS(here("create-networks", "output", "arrest_net_bp.rds"))

officers <-
    my_read_csv(here("create-networks", "input", "active_officers_ba.csv")) %>%
    mutate(age = 2015 - birth_year,
           years_exp = (ymd("2015-12-01") - appointed_month) / dyears(1)) %>%
    select(-birth_year, -appointed_month)
```

## Create dependent variables (i.e., shift matrix, stop matrix, arrest matrix)

I have to create the adjacency matrices in this convoluted fashion in order for them to have the same ordering as the matrices for the independent variables.

```{r}
shift_matrix <-
    as_data_frame(unit_shift_net, what = "edges") %>%
    graph_from_data_frame(directed = F, vertices = officers) %>%
    as_adjacency_matrix(sparse = F, attr = "weight")

stop_matrix <-
    as_data_frame(stop_net, what = "edges") %>%
    graph_from_data_frame(directed = F, vertices = officers) %>%
    as_adjacency_matrix(sparse = F, attr = "weight")

arrest_matrix <-
    as_data_frame(arrest_net, what = "edges") %>%
    graph_from_data_frame(directed = F, vertices = officers) %>%
    as_adjacency_matrix(sparse = F, attr = "weight")

table(rownames(shift_matrix) == rownames(stop_matrix))
table(rownames(shift_matrix) == rownames(arrest_matrix))
table(colnames(shift_matrix) == colnames(stop_matrix))
table(colnames(shift_matrix) == colnames(arrest_matrix))
```

## Verify results using normal OLS

```{r}
AddRace <- function(df) {
    
    df %>%
        mutate(white_white = if_else(officer_race.x == "officer_white" & officer_race.y == "officer_white",
                                 1, 0),
           black_black = if_else(officer_race.x == "officer_black" & officer_race.y == "officer_black",
                                 1, 0),
           hisp_hisp = if_else(officer_race.x == "officer_hisp" & officer_race.y == "officer_hisp",
                               1, 0),
           white_black = if_else((officer_race.x == "officer_black" & officer_race.y == "officer_white") |
                                     (officer_race.x == "officer_white" & officer_race.y == "officer_black"),
                                 1, 0),
           white_hisp = if_else((officer_race.x == "officer_white" & officer_race.y == "officer_hisp") |
                                     (officer_race.x == "officer_hisp" & officer_race.y == "officer_white"),
                                1, 0),
           black_hisp = if_else((officer_race.x == "officer_black" & officer_race.y == "officer_hisp") |
                                     (officer_race.x == "officer_hisp" & officer_race.y == "officer_black"),
                                1, 0))
}

AddSex <- function(df) {
    
    df %>%
        mutate(male_male = if_else(officer_gender.x == "MALE" & officer_gender.y == "MALE",
                                   1, 0)) %>%
        mutate(female_female = if_else(officer_gender.x == "FEMALE" & officer_gender.y == "FEMALE",
                                       1, 0)) %>%
        mutate(male_female = if_else((officer_gender.x == "MALE" & officer_gender.y == "FEMALE") |
                                         (officer_gender.x == "FEMALE" & officer_gender.y == "MALE"),
                                     1, 0))
}
```

```{r}
shifts_df <-
    as_data_frame(unit_shift_net, what = "edges") %>%
    left_join(officers, by = c("from" = "officer_id")) %>%
    left_join(officers, by = c("to" = "officer_id")) %>%
    AddRace() %>%
    AddSex() %>%
    mutate(exp_diff = abs(years_exp.x - years_exp.y)) %>%
    rowwise() %>%
    mutate(edge_id = paste0(max(from, to), "_", min(from, to)))

ols_shifts <- lm(weight ~ white_black + white_hisp + black_black + black_hisp +
                     hisp_hisp + male_female + female_female + years_exp.x +
                     years_exp.y + exp_diff,
                 data = shifts_df)

stops_df <-
    as_data_frame(stop_net, what = "edges") %>%
    left_join(officers, by = c("from" = "officer_id")) %>%
    left_join(officers, by = c("to" = "officer_id")) %>%
    AddRace() %>%
    AddSex() %>%
    mutate(exp_diff = abs(years_exp.x - years_exp.y)) %>%
    rowwise() %>%
    mutate(edge_id = paste0(max(from, to), "_", min(from, to))) %>%
    left_join(select(shifts_df, edge_id, weight), by = "edge_id") %>%
    mutate(nr_shifts = if_else(is.na(weight.y), 0, weight.y))

ols_stops <- lm(weight.x ~ white_black + white_hisp + black_black + black_hisp +
                     hisp_hisp + male_female + female_female + years_exp.x +
                     years_exp.y + exp_diff + nr_shifts,
                 data = stops_df)

arrests_df <-
    as_data_frame(arrest_net, what = "edges") %>%
    left_join(officers, by = c("from" = "officer_id")) %>%
    left_join(officers, by = c("to" = "officer_id")) %>%
    AddRace() %>%
    AddSex() %>%
    mutate(exp_diff = abs(years_exp.x - years_exp.y)) %>%
    rowwise() %>%
    mutate(edge_id = paste0(max(from, to), "_", min(from, to))) %>%
    left_join(select(shifts_df, edge_id, weight), by = "edge_id") %>%
    mutate(nr_shifts = if_else(is.na(weight.y), 0, weight.y))

ols_arrests <- lm(weight.x ~ white_black + white_hisp + black_black + black_hisp +
                     hisp_hisp + male_female + female_female + years_exp.x +
                     years_exp.y + exp_diff + nr_shifts,
                 data = arrests_df)
```

## Create independent variable matrices (race/ethnicity, sex, years of experience, shift matrix)

```{r}
Create_Race_Matrices <- function(df, officer_df) {
    
    white_white <- 
        df %>%
        filter(officer_race.x == "officer_white" & officer_race.y == "officer_white") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)

    white_black <- 
        df %>%
        filter((officer_race.x == "officer_black" & officer_race.y == "officer_white") |
                   officer_race.x == "officer_white" & officer_race.y == "officer_black") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    white_hisp <- 
        df %>%
        filter((officer_race.x == "officer_hisp" & officer_race.y == "officer_white") |
                   officer_race.x == "officer_white" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    black_black <- 
        df %>%
        filter(officer_race.x == "officer_black" & officer_race.y == "officer_black") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    black_hisp <- 
        df %>%
        filter((officer_race.x == "officer_hisp" & officer_race.y == "officer_black") |
                   officer_race.x == "officer_black" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    hisp_hisp <- 
        df %>%
        filter(officer_race.x == "officer_hisp" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(white_white) == rownames(white_black)))))
    check2 <- all(as.logical(names(table(rownames(white_white) == rownames(white_black)))))
    check3 <- all(as.logical(names(table(rownames(white_white) == rownames(white_hisp)))))
    check4 <- all(as.logical(names(table(rownames(white_white) == rownames(black_black)))))
    check5 <- all(as.logical(names(table(rownames(white_white) == rownames(black_hisp)))))
    check6 <- all(as.logical(names(table(rownames(white_white) == rownames(hisp_hisp)))))
    
    check7 <- all(as.logical(names(table(colnames(white_white) == colnames(white_black)))))
    check8 <- all(as.logical(names(table(colnames(white_white) == colnames(white_black)))))
    check9 <- all(as.logical(names(table(colnames(white_white) == colnames(white_hisp)))))
    check10 <- all(as.logical(names(table(colnames(white_white) == colnames(black_black)))))
    check11 <- all(as.logical(names(table(colnames(white_white) == colnames(black_hisp)))))
    check12 <- all(as.logical(names(table(colnames(white_white) == colnames(hisp_hisp)))))
    
    if(all(check1, check2, check3, check4, check5, check6, check7, check8,
           check9, check10, check11, check12)) {
        
        return(list("ww" = white_white, "wb" = white_black, "wh" = white_hisp,
                "bb" = black_black, "bh" = black_hisp, "hh" = hisp_hisp))
        }
    else {
        -1
        }
}

Create_Sex_Matrices <- function(df, officer_df) {
    
    male_male <- 
        df %>%
        filter(officer_gender.x == "MALE" & officer_gender.y == "MALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)

    male_female <- 
        df %>%
        filter((officer_gender.x == "MALE" & officer_gender.y == "FEMALE") |
                   officer_gender.x == "FEMALE" & officer_gender.y == "MALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    female_female <- 
        df %>%
        filter(officer_gender.x == "FEMALE" & officer_gender.y == "FEMALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(male_male) == rownames(male_female)))))
    check2 <- all(as.logical(names(table(rownames(male_male) == rownames(male_female)))))
    
    check3 <- all(as.logical(names(table(colnames(male_male) == colnames(male_female)))))
    check4 <- all(as.logical(names(table(colnames(male_male) == colnames(male_female)))))
    
    if(all(check1, check2, check3, check4)) {
        return(list("mm" = male_male, "mf" = male_female, "ff" = female_female))
        }
    else {
        -1
        }
}

Create_Exp_Matrices <- function(df, officer_df) {
    
    exp1 <- matrix(officer_df[["years_exp"]],
                   nrow(officer_df),
                   nrow(officer_df),
                   byrow = F,
                   dimnames = list(officer_df$officer_id,
                                   officer_df$officer_id))
    
    exp2 <- matrix(officer_df[["years_exp"]],
                   nrow(officer_df),
                   nrow(officer_df),
                   byrow = T,
                   dimnames = list(officer_df$officer_id,
                                   officer_df$officer_id))
    
    exp_diff <-
        df %>%
        select(from, to, exp_diff) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F, attr = "exp_diff")
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(exp1) == rownames(exp2)))))
    check2 <- all(as.logical(names(table(rownames(exp1) == rownames(exp_diff)))))
    
    check3 <- all(as.logical(names(table(colnames(exp1) == colnames(exp2)))))
    check4 <- all(as.logical(names(table(colnames(exp1) == colnames(exp_diff)))))
    
    if(all(check1, check2, check3, check4)) {
        return(list("exp1" = exp1, "exp2" = exp2, "exp_diff" = exp_diff))
        }
    else {
        -1
        }
}

arrest_race_matrices <- Create_Race_Matrices(arrests_df, officers)
arrest_sex_matrices <- Create_Sex_Matrices(arrests_df, officers)
arrest_exp_matrices <- Create_Exp_Matrices(arrests_df, officers)

# Check to make sure all the matrices match
table(rownames(arrest_race_matrices[[1]]) == rownames(arrest_sex_matrices[[1]]))
table(rownames(arrest_race_matrices[[1]]) == rownames(arrest_exp_matrices[[1]]))
table(rownames(arrest_race_matrices[[1]]) == rownames(arrest_matrix))

table(colnames(arrest_race_matrices[[1]]) == colnames(arrest_sex_matrices[[1]]))
table(colnames(arrest_race_matrices[[1]]) == colnames(arrest_exp_matrices[[1]]))
table(colnames(arrest_race_matrices[[1]]) == colnames(arrest_matrix))
```

```{r}
save(arrest_matrix, arrest_race_matrices, arrest_sex_matrices, arrest_exp_matrices,
     shift_matrix, file = here("create-networks", "output", "arrest_matrices.Rda"))
```
