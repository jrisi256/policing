---
title: "Create Independent Variables"
format: pdf
---

```{r}
library(knitr)
opts_chunk$set(message = F, echo = F, warning = F)

library(here)
source(here("functions.R"))

officers <-
    my_read_csv(here("create-networks", "input", "active_officers_ba.csv")) %>%
    mutate(age = 2015 - birth_year,
           years_exp = (ymd("2015-12-01") - appointed_month) / dyears(1)) %>%
    select(-birth_year, -appointed_month)
```

## Create independent variable matrices (race/ethnicity, sex, years of experience)

```{r}
Create_Race_Matrices <- function(df, officer_df) {
    
    white_white <- 
        df %>%
        filter(officer_race.x == "officer_white" & officer_race.y == "officer_white") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)

    white_black <- 
        df %>%
        filter((officer_race.x == "officer_black" & officer_race.y == "officer_white") |
                   officer_race.x == "officer_white" & officer_race.y == "officer_black") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    white_hisp <- 
        df %>%
        filter((officer_race.x == "officer_hisp" & officer_race.y == "officer_white") |
                   officer_race.x == "officer_white" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    black_black <- 
        df %>%
        filter(officer_race.x == "officer_black" & officer_race.y == "officer_black") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    black_hisp <- 
        df %>%
        filter((officer_race.x == "officer_hisp" & officer_race.y == "officer_black") |
                   officer_race.x == "officer_black" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    hisp_hisp <- 
        df %>%
        filter(officer_race.x == "officer_hisp" & officer_race.y == "officer_hisp") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(white_white) == rownames(white_black)))))
    check2 <- all(as.logical(names(table(rownames(white_white) == rownames(white_black)))))
    check3 <- all(as.logical(names(table(rownames(white_white) == rownames(white_hisp)))))
    check4 <- all(as.logical(names(table(rownames(white_white) == rownames(black_black)))))
    check5 <- all(as.logical(names(table(rownames(white_white) == rownames(black_hisp)))))
    check6 <- all(as.logical(names(table(rownames(white_white) == rownames(hisp_hisp)))))
    
    check7 <- all(as.logical(names(table(colnames(white_white) == colnames(white_black)))))
    check8 <- all(as.logical(names(table(colnames(white_white) == colnames(white_black)))))
    check9 <- all(as.logical(names(table(colnames(white_white) == colnames(white_hisp)))))
    check10 <- all(as.logical(names(table(colnames(white_white) == colnames(black_black)))))
    check11 <- all(as.logical(names(table(colnames(white_white) == colnames(black_hisp)))))
    check12 <- all(as.logical(names(table(colnames(white_white) == colnames(hisp_hisp)))))
    
    if(all(check1, check2, check3, check4, check5, check6, check7, check8,
           check9, check10, check11, check12)) {
        
        return(list("ww" = white_white, "wb" = white_black, "wh" = white_hisp,
                "bb" = black_black, "bh" = black_hisp, "hh" = hisp_hisp))
        }
    else {
        -1
        }
}

Create_Sex_Matrices <- function(df, officer_df) {
    
    male_male <- 
        df %>%
        filter(officer_gender.x == "MALE" & officer_gender.y == "MALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)

    male_female <- 
        df %>%
        filter((officer_gender.x == "MALE" & officer_gender.y == "FEMALE") |
                   officer_gender.x == "FEMALE" & officer_gender.y == "MALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    female_female <- 
        df %>%
        filter(officer_gender.x == "FEMALE" & officer_gender.y == "FEMALE") %>%
        select(from, to) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F)
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(male_male) == rownames(male_female)))))
    check2 <- all(as.logical(names(table(rownames(male_male) == rownames(male_female)))))
    
    check3 <- all(as.logical(names(table(colnames(male_male) == colnames(male_female)))))
    check4 <- all(as.logical(names(table(colnames(male_male) == colnames(male_female)))))
    
    if(all(check1, check2, check3, check4)) {
        return(list("mm" = male_male, "mf" = male_female, "ff" = female_female))
        }
    else {
        -1
        }
}

Create_Exp_Matrices <- function(df, officer_df) {
    
    exp1 <- matrix(officer_df[["years_exp"]],
                   nrow(officer_df),
                   nrow(officer_df),
                   byrow = F,
                   dimnames = list(officer_df$officer_id,
                                   officer_df$officer_id))
    
    exp2 <- matrix(officer_df[["years_exp"]],
                   nrow(officer_df),
                   nrow(officer_df),
                   byrow = T,
                   dimnames = list(officer_df$officer_id,
                                   officer_df$officer_id))
    
    exp_diff <-
        df %>%
        select(from, to, exp_diff) %>%
        graph_from_data_frame(directed = F, vertices = officer_df) %>%
        as_adjacency_matrix(sparse = F, attr = "exp_diff")
    
    # Check to make sure all matrices have rows and columns in right order
    check1 <- all(as.logical(names(table(rownames(exp1) == rownames(exp2)))))
    check2 <- all(as.logical(names(table(rownames(exp1) == rownames(exp_diff)))))
    
    check3 <- all(as.logical(names(table(colnames(exp1) == colnames(exp2)))))
    check4 <- all(as.logical(names(table(colnames(exp1) == colnames(exp_diff)))))
    
    if(all(check1, check2, check3, check4)) {
        return(list("exp1" = exp1, "exp2" = exp2, "exp_diff" = exp_diff))
        }
    else {
        -1
        }
}
```

```{r}
# Every officer crossed with every other officer
cross_df <-
    officers %>% full_join(officers, by = character()) %>%
    filter(officer_id.x != officer_id.y) %>%
    rename(from = officer_id.x, to = officer_id.y) %>%
    mutate(exp_diff = abs(years_exp.x - years_exp.y))

race_matrices <- Create_Race_Matrices(cross_df, officers)
sex_matrices <- Create_Sex_Matrices(cross_df, officers)
exp_matrices <- Create_Exp_Matrices(cross_df, officers)

# Check to ensure race and sex add up to correct values
race_sum <- sum(race_matrices[[1]] + race_matrices[[1]] + race_matrices[[1]] +
  race_matrices[[1]] + race_matrices[[1]] + race_matrices) == nrow(cross_df)

sex_sum <- sum(sex_matrices[[1]] + sex_matrices[[1]] + sex_matrices[[1]]) == nrow(cross_df)

# Check to make sure all the matrices match
table(rownames(race_matrices[[1]]) == rownames(sex_matrices[[1]]))
table(rownames(race_matrices[[1]]) == rownames(exp_matrices[[1]]))

table(colnames(race_matrices[[1]]) == colnames(sex_matrices[[1]]))
table(colnames(race_matrices[[1]]) == colnames(exp_matrices[[1]]))
```

```{r}
save(race_matrices, sex_matrices, exp_matrices,
     file = here("create-networks", "output", "arrest_matrices.Rda"))
```
