---
title: "Join Officers To Their Work Assignments"
format: pdf
---

```{r, include = F}
library(here)
library(readr)
library(dplyr)
library(knitr)
library(ggplot2)
library(stringr)
library(R.utils)
library(lubridate)
opts_chunk$set(message = F, echo = F, warning = F, output = F)
write_path <- paste("2_clean_data", "output", sep = "/")
```

```{r}
# Read in police officer roster.
officers <- 
    read_csv(
        here("1_create_codebooks", "input", "officers.csv.gz"),
        col_types = 
            cols_only(
                birth_year = "d",
                appointed_month = col_date(format = "%Y-%m-%d"),
                officer_id = "c",
                officer_race = "c",
                officer_gender = "c",
                spanish = "l"
            )
        )

# Read in officer-work assignment data.
assignments <-
    read_csv(
        here(write_path, "1_assignments_imputed.csv.gz"),
        col_types = 
            cols_only(
                officer_id = "c",
                assignment_id = "c",
                month = col_date(format = "%Y-%m-%d"),
                rank = "c",
                unit = "c",
                date = col_date(format = "%Y-%m-%d"),
                shift = "c",
                start_time = "d",
                end_time = "d",
                weekday = "c",
                beat_assigned = "c",
                months_from_start = "d",
                months_from_start_sq = "d",
                duration = "d"
            )
    )
```

## Join the officer roster to work assignments - Risi & Zhao

```{r}
# Make changes to officer race.
officers_risi <-
    officers %>%
    rename(officer_sex = officer_gender) %>%
    mutate(
        officer_race = str_replace(officer_race, "officer_", ""),
        officer_race = 
            case_when(
                officer_race == "aapi" ~ "aapi_native",
                officer_race == "native" ~ "aapi_native",
                T ~ officer_race
            )
    )
nr_race_changed <- table(officers_risi$officer_race)[["aapi_native"]]
write_csv(officers_risi, here(write_path, "cleaned_officers.csv"))
gzip(here(write_path, "cleaned_officers.csv"), overwrite = T)

# Make changes to officer ranks and work assignment start/end times.
leadership_ranks <- c("CHIEF", "COMMANDER", "DEPUTY CHIEF", "LIEUTENANT")
not_other_ranks <-
    c(
        "CHIEF", "COMMANDER", "DEPUTY CHIEF", "LIEUTENANT", "POLICE OFFICER",
        "SERGEANT"
    )

assignments_risi <-
    assignments %>%
    mutate(
        rank =
            case_when(
                is.na(rank) ~ NA_character_,
                rank %in% leadership_ranks ~ "leadership",
                !(rank %in% not_other_ranks) ~ "other",
                T ~ rank
            ),
        start_date = if_else(is.na(start_time), NA_Date_, date),
        start_hms = hms::hms(
            rep(0, nrow(assignments)),
            rep(0, nrow(assignments)),
            start_time
        ),
        start_datetime = as_datetime(paste0(start_date, " ", start_hms)),
        end_date =
            case_when(
                is.na(end_time) ~ NA_Date_,
                end_time > 24 ~ date + 1,
                TRUE ~ date
            ),
        end_hms = hms::hms(
            rep(0, nrow(assignments)),
            rep(0, nrow(assignments)),
            case_when(
                is.na(end_time) ~ NA_real_,
                end_time > 24 ~ end_time - 24,
                TRUE ~ end_time
            )
        ),
        end_datetime = as_datetime(paste0(end_date, " ", end_hms))
    ) %>%
    select(-start_date, -start_hms, -end_date, -end_hms)

nr_rank_changed_leadership <- table(assignments_risi$rank)[["leadership"]]
nr_rank_changed_other <- table(assignments_risi$rank)[["other"]]

# Merge officers to their work assignments.
officer_assignments <-
    inner_join(assignments_risi, officers_risi, by = "officer_id") %>%
    arrange(officer_id, start_datetime) %>%
    group_by(officer_id) %>%
    mutate(
        overlap_shift_1 =
            end_datetime >= lead(start_datetime) & !is.na(lead(start_datetime)),
        overlap_shift_2 =
            start_datetime <= lag(end_datetime) & !is.na(lag(end_datetime)),
    ) %>%
    ungroup()

nr_missing <-
    officer_assignments %>%
    filter(is.na(start_datetime) | is.na(end_datetime)) %>%
    nrow()

nr_overlap <-
    officer_assignments %>%
    filter(overlap_shift_1 | overlap_shift_2) %>%
    nrow()

# Drop officer-work assignments with missing start/end time.
officer_assignments_final <-
    officer_assignments %>%
    filter(!is.na(start_datetime) & !is.na(end_datetime)) %>%
    filter(!overlap_shift_1 & !overlap_shift_2) %>%
    select(-overlap_shift_1, -overlap_shift_2)

nr_officer_og <- length(unique(officer_assignments$officer_id))
nr_officer_final <- length(unique(officer_assignments_final$officer_id))

# Save results
write_csv(
    officer_assignments_final,
    here(write_path, "2_officer_assignments_risi.csv")
)
gzip(here(write_path, "2_officer_assignments_risi.csv"), overwrite = T)
```

1. For officer race, I combine AAPI and Native American officers into one category.
    * `r nr_race_changed` (`r round(nr_race_changed / nrow(officers) * 100 , 2)`%) officers had their values changed.
2. For officer rank, I combine Chief, Commander, Deputy Chief, and Lieutenant into a **leadership** category. **Sergeant** and **Police Officer** remain the same. All other ranks are combined into an **other** category. Percentage-wise there are only a few work assignments for those in leadership, but there is still a large absolute number of patrols shifts conducted by those in leadership (in the tens of thousands).
    * `r nr_rank_changed_leadership` (`r round(nr_rank_changed_leadership / nrow(assignments_risi) * 100 , 2)`%) assignments
    had their values changed to *leadership*.
    * `r nr_rank_changed_other` (`r round(nr_rank_changed_other / nrow(assignments_risi) * 100 , 2)`%) assignments
    had their values changed to *other*.
3. Create a start date time and end date time column which combines date with start time and end time respectively. This creates two columns in the YYYY-MM-DD HH:MM:SS format.

### Pre-filtering totals

* **Number of officers**: `r nr_officer_og`
* **Number of officer-work assignments**: `r nrow(officer_assignments)`

### Drop officer work assignments with missing start time and end time.

* `r nr_missing` (`r round(nr_missing / nrow(officer_assignments) * 100, 2)`%) officer-work assignments are missing their start time/end time. I drop these officer work assignments.

### Drop overlapping officer work assignemtns.

* `r nr_overlap` (`r round(nr_overlap / nrow(officer_assignments) * 100, 2)`%) officer-work assignments overlap. To give an example, officer 1 was assigned work assignment 1 on January 1, 2012 from 12am to 8am. They were also assigned work assignment 2 on January 1, 2012 from 6am to 2pm. Both of these officer's work assignments are counted as overlapping (with each other). I drop all such officer work assignments.

### Results of join

* **Number of officers**: `r nr_officer_final`
    * `r nr_officer_og - nr_officer_final` officers were dropped.
    * This is a `r round((nr_officer_og - nr_officer_final) / nr_officer_og * 100, 2)`% reduction.
* **Number of officer-work assignments**: `r nrow(officer_assignments_final)`
    * `r nrow(assignments) - nrow(officer_assignments_final)` assignments were dropped.
    * This is a `r round((nrow(assignments) - nrow(officer_assignments_final)) / nrow(assignments) * 100, 2)`% reduction.
    
#### Missings

```{r}
active <- officer_assignments_final %>% distinct(officer_id, .keep_all = T)

missing_race <- active %>% filter(is.na(officer_race)) %>% nrow()
missing_sex <- active %>% filter(is.na(officer_sex)) %>% nrow()
missing_age <- active %>% filter(is.na(birth_year)) %>% nrow()
missing_spanish <- active %>% filter(is.na(spanish)) %>% nrow()
missing_exp <- active %>% filter(is.na(appointed_month)) %>% nrow()

m_race_wa <- officer_assignments_final %>% filter(is.na(officer_race)) %>% nrow()
m_sex_wa <- officer_assignments_final %>% filter(is.na(officer_sex)) %>% nrow()
m_age_wa <- officer_assignments_final %>% filter(is.na(birth_year)) %>% nrow()
m_sp_wa <- officer_assignments_final %>% filter(is.na(spanish)) %>% nrow()
m_exp_wa <- officer_assignments_final %>% filter(is.na(appointed_month)) %>% nrow()

m_rank <- table(is.na(officer_assignments_final$rank))[["TRUE"]]
m_exp <- table(is.na(officer_assignments_final$months_from_start))[["TRUE"]]
```

* `r missing_race` (`r round(missing_race / nrow(active) * 100, 2)`%) officers are missing their race (`r m_race_wa` (`r round(m_race_wa / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments).
* `r missing_sex` (`r round(missing_sex / nrow(active) * 100, 2)`%) officers are missing their sex (`r m_sex_wa` (`r round(m_sex_wa / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments).
* `r missing_age` (`r round(missing_age / nrow(active) * 100, 2)`%) officers are missing their age (`r m_age_wa` (`r round(m_age_wa / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments).
* `r missing_spanish` (`r round(missing_spanish / nrow(active) * 100, 2)`%) officers are missing their Spanish-speaking ability (`r m_sp_wa` (`r round(m_sp_wa / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments).
* `r missing_exp` (`r round(missing_exp / nrow(active) * 100, 2)`%) officers are missing the month they started (`r m_exp_wa` (`r round(m_exp_wa / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments).
* `r m_rank` (`r round(m_rank / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments are missing their rank.
* `r m_exp` (`r round(m_exp / nrow(officer_assignments_final) * 100, 2)`%) officer-work assignments are missing the amount of experience of the officer. This is due to a data error where the officer's appointment date is **AFTER** their work assignment date. I.e., they began working before they were officially a police officer.

### Officers who did not have a work assignment.

```{r, output = T}
officers_risi <-
    officers_risi %>%
    mutate(
        has_a_wa = if_else(officer_id %in% assignments_risi$officer_id, T, F)
    )

ggplot(officers_risi, aes(x = birth_year)) +
    geom_histogram(bins = 40, aes(fill = has_a_wa)) +
    facet_wrap(~has_a_wa) +
    theme_bw()

officers_risi %>%
    count(officer_race, has_a_wa) %>%
    group_by(has_a_wa) %>%
    mutate(prcnt = n / sum(n)) %>%
    ungroup() %>%
    ggplot(aes(x = officer_race, y = prcnt)) +
    geom_bar(stat = "identity", aes(fill = has_a_wa)) +
    facet_wrap(~has_a_wa) +
    theme_bw() +
    theme(axis.text.x = element_text(hjust = 0, angle = 330))

officers_risi %>%
    count(officer_sex, has_a_wa) %>%
    group_by(has_a_wa) %>%
    mutate(prcnt = n / sum(n)) %>%
    ungroup() %>%
    ggplot(aes(x = officer_sex, y = prcnt)) +
    geom_bar(stat = "identity", aes(fill = has_a_wa)) +
    facet_wrap(~has_a_wa) +
    theme_bw()

officers_risi %>%
    count(spanish, has_a_wa) %>%
    group_by(has_a_wa) %>%
    mutate(prcnt = n / sum(n)) %>%
    ungroup() %>%
    ggplot(aes(x = spanish, y = prcnt)) +
    geom_bar(stat = "identity", aes(fill = has_a_wa)) +
    facet_wrap(~has_a_wa) +
    theme_bw()
```

Officers who have a work assignment appear to be, generally, younger and more racially and sexually diverse than officers who do not have a work assignment. This supports the idea that at least some (if not many) of the officers who do not have a work assignment are likely retired (they would be older and more likely to be White and Male). Some of the officers listed in the roster likely do not get assigned work assignments of the kind we have data on (e.g., they are in a leadership role, or they're in a special unit or on a special task force). More worrisome might be officers who don't get shift assignments for some other, unknown reason which might hurt the validity of the study (e.g. they're being punished or rewarded). By merging with the Invisible Institute data, we might be able to shed more light on this issue.
